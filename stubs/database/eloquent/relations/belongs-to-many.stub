<?php

namespace Illuminate\Database\Eloquent\Relations;

use Illuminate\Database\Eloquent\Model;

/**
 * @template TParent of \Illuminate\Database\Eloquent\Model
 * @template TRelated of \Illuminate\Database\Eloquent\Model
 * @extends \Illuminate\Database\Eloquent\Relations\Relation<TParent, TRelated>
 * @phpstan-type TRelatedCollection \Illuminate\Database\Eloquent\Collection<int, TRelated>
 */
class BelongsToMany extends Relation
{
    /**
     * @param mixed $id
     * @param string[] $columns
     * @return TRelated
     */
    public function findOrNew($id, $columns = ['*']);

    /**
     * @param array<string, mixed> $attributes
     * @param array<string, mixed> $values
     * @return TRelated
     */
    public function firstOrNew(array $attributes = [], array $values = []);

    /**
     * @param array<string, mixed> $attributes
     * @param array<string, mixed> $values
     * @param array<string, mixed> $joining
     * @param bool $touch
     * @return TRelated
     */
    public function firstOrCreate(array $attributes = [], array $values = [], array $joining = [], $touch = true);

    /**
     * @param array<string, mixed> $attributes
     * @param array<string, mixed> $values
     * @param array<string, mixed> $joining
     * @param bool $touch
     * @return TRelated
     */
    public function createOrFirst(array $attributes = [], array $values = [], array $joining = [], $touch = true);

    /**
     * @param array<string, mixed> $attributes
     * @param array<string, mixed> $values
     * @param array<string, mixed> $joining
     * @param bool $touch
     * @return TRelated
     */
    public function updateOrCreate(array $attributes, array $values = [], array $joining = [], $touch = true);

    /**
     * @param mixed $id
     * @param string[] $columns
     * @return TRelated|null
     */
    public function find($id, $columns = ['*']);

    /**
     * @param \Illuminate\Contracts\Support\Arrayable|mixed[] $ids
     * @param string[] $columns
     * @return TRelatedCollection
     */
    public function findMany($ids, $columns = ['*']);

    /**
     * @param mixed $id
     * @param string[] $columns
     * @return TRelated
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<TRelated>
     */
    public function findOrFail($id, $columns = ['*']);

    /**
     * @template TOther
     * @param mixed $id
     * @param \Closure(): TOther|array $columns
     * @param \Closure(): TOther|null  $callback
     * @return TRelated|TOther
     */
    public function findOr($id, $columns = ['*'], ?Closure $callback = null);

    /**
     * @param \Closure|string|string[] $column
     * @param mixed $operator
     * @param mixed $value
     * @param string $boolean
     * @return TRelated|null
     */
    public function firstWhere($column, $operator = null, $value = null, $boolean = 'and');

    /**
     * @param string[] $columns
     * @return TRelated|null
     */
    public function first($columns = ['*']);

    /**
     * @param string[] $columns
     * @return TRelated
     * @throws \Illuminate\Database\Eloquent\ModelNotFoundException<TRelated>
     */
    public function firstOrFail($columns = ['*']);

    /**
     * @template TOther
     * @param \Closure(): TOther|array $columns
     * @param \Closure(): TOther|null $callback
     * @return TRelated|TOther
     */
    public function firstOr($columns = ['*'], ?Closure $callback = null);

    /**
     * @param string[] $columns
     * @return TRelatedCollection
     */
    public function get($columns = ['*']);

    /**
     * @param TRelated $model
     * @param array<string, mixed> $pivotAttributes
     * @param bool $touch
     * @return TRelated
     */
    public function save(Model $model, array $pivotAttributes = [], $touch = true);

    /**
     * @param TRelated $model
     * @param array<string, mixed> $pivotAttributes
     * @param bool $touch
     * @return TRelated
     */
    public function saveQuietly(Model $model, array $pivotAttributes = [], $touch = true);

    /**
     * @template TModels of \Illuminate\Support\Collection<array-key, TRelated>|array<array-key, TRelated>
     * @param TModels $models
     * @param array<string, mixed> $pivotAttributes
     * @return TModels
     */
    public function saveMany($models, array $pivotAttributes = []);

    /**
     * @template TModels of \Illuminate\Support\Collection<array-key, TRelated>|array<array-key, TRelated>
     * @param TModels $models
     * @param array<string, mixed> $pivotAttributes
     * @return TModels
     */
    public function saveManyQuietly($models, array $pivotAttributes = []);

    /**
     * @param array<string, mixed> $attributes
     * @param array<string, mixed> $joining
     * @param bool $touch
     * @return TRelated
     */
    public function create(array $attributes = [], array $joining = [], $touch = true);

    /**
     * @param iterable<array-key, array<string, mixed>> $records
     * @param array<string, mixed> $joinings
     * @return list<TRelated>
     */
    public function createMany(iterable $records, array $joinings = []);
}
