<?php

namespace Illuminate\Database\Eloquent\Concerns;

use Closure;

/**
 * @template TModel of \Illuminate\Database\Eloquent\Model
 */
trait QueriesRelationships
{
    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param \Illuminate\Database\Eloquent\Relations\Relation|string $relation
     * @param string $operator
     * @param int $count
     * @param string $boolean
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @return static
     * @throws \RuntimeException
     */
    public function has($relation, $operator = '>=', $count = 1, $boolean = 'and', ?Closure $callback = null);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param string $relation
     * @param string $boolean
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @return static
     */
    public function doesntHave($relation, $boolean = 'and', ?Closure $callback = null);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param string $relation
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @param string $operator
     * @param int $count
     * @return static
     */
    public function whereHas($relation, ?Closure $callback = null, $operator = '>=', $count = 1);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param string $relation
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @param string $operator
     * @param int $count
     * @return static
     */
    public function withWhereHas($relation, ?Closure $callback = null, $operator = '>=', $count = 1);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param string $relation
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @param string $operator
     * @param int $count
     * @return static
     */
    public function orWhereHas($relation, ?Closure $callback = null, $operator = '>=', $count = 1);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param string $relation
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @return static
     */
    public function whereDoesntHave($relation, ?Closure $callback = null);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param string $relation
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @return static
     */
    public function orWhereDoesntHave($relation, ?Closure $callback = null);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
     * @param string|string[] $types
     * @param string $operator
     * @param int $count
     * @param string $boolean
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @return static
     */
    public function hasMorph($relation, $types, $operator = '>=', $count = 1, $boolean = 'and', ?Closure $callback = null);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
     * @param string|string[] $types
     * @param string $boolean
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @return static
     */
    public function doesntHaveMorph($relation, $types, $boolean = 'and', ?Closure $callback = null);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
     * @param string|string[] $types
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @param string $operator
     * @param int $count
     * @return static
     */
    public function whereHasMorph($relation, $types, ?Closure $callback = null, $operator = '>=', $count = 1);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
     * @param string|string[] $types
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @param string $operator
     * @param int $count
     * @return static
     */
    public function orWhereHasMorph($relation, $types, ?Closure $callback = null, $operator = '>=', $count = 1);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
     * @param string|string[] $types
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @return static
     */
    public function whereDoesntHaveMorph($relation, $types, ?Closure $callback = null);

    /**
     * @template TBuilder of \Illuminate\Database\Eloquent\Builder<\Illuminate\Database\Eloquent\Model>
     * @param \Illuminate\Database\Eloquent\Relations\MorphTo|string $relation
     * @param string|string[] $types
     * @param \Closure(TBuilder): (void|TBuilder)|null $callback
     * @return static
     */
    public function orWhereDoesntHaveMorph($relation, $types, ?Closure $callback = null);
}
